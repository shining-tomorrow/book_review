// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("POSTGRES_URL")
  extensions = [pgcrypto]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ReactionType {
  LIKE
  DISLIKE
}

// 대문자 작성 시, prisma에서 대소문자 구분을 위해 소문자를 사용함. 이에 따라 sql문 쓰기가 어려워짐. 소문자와 언더바로만 쓰자.
// balletStartDate: 발레 시작 날짜, 발레 N년차 확인 용도
model User {
  id                            String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                         String                      @unique @db.VarChar(100)
  nickname                      String                      @unique @db.VarChar(100)
  is_admin                      Boolean                     @default(false)
  name                          String?                     @db.VarChar(20)
  phone                         String?                     @db.VarChar(20)
  birthday                      String?                     @db.Char(8)
  password                      String
  created_at                    DateTime                    @default(now()) @db.Timestamptz
  updated_at                    DateTime                    @updatedAt @db.Timestamptz
  token                         String?
  profile_image_url             String?
  gender                        Gender?
  ballet_start_date             DateTime?                   @db.Timestamptz
  ballet_academy                String?                     @db.VarChar(25)
  ballet_sessions_per_week      Int?
  posts                         Post[]
  comments                      Comment[]
  post_reactions                PostReaction[]
  comment_reactions             CommentReaction[]
  ballet_posts                  BalletPost[]
  ballet_post_comments          BalletPostComment[]
  ballet_post_reactions         BalletPostReaction[]
  ballet_post_comment_reactions BalletPostCommentReaction[]
  ballet_record                 BalletRecord[]
  polls                         Poll[]
  poll_comments                 PollComment[]
  user_vote                     UserVote[]
  poll_options                  PollOption[]
  BalletPostCategory            BalletPostCategory[]
}

// 게시판

model Post {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime       @default(now()) @db.Timestamptz
  updated_at     DateTime       @updatedAt @db.Timestamptz
  title          String         @db.VarChar(200)
  views          Int            @default(0)
  author         User           @relation(fields: [author_id], references: [id])
  author_id      String         @db.Uuid
  content        String
  thumbnail      String?
  category       Category       @relation(fields: [category_id], references: [id])
  category_id    String         @db.Uuid
  comments       Comment[]
  tags           PostTag[]
  post_reactions PostReaction[]
}

model Category {
  id    String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String @unique @db.VarChar(20)
  posts Post[]
}

model Tag {
  id    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String    @unique @db.VarChar(20)
  posts PostTag[]
}

model PostTag {
  post    Post   @relation(fields: [post_id], references: [id])
  post_id String @db.Uuid
  tag     Tag    @relation(fields: [tag_id], references: [id])
  tag_id  String @db.Uuid

  @@id([post_id, tag_id])
}

model Comment {
  id                String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String
  author            User              @relation(fields: [author_id], references: [id])
  author_id         String            @db.Uuid
  post              Post              @relation(fields: [post_id], references: [id])
  post_id           String            @db.Uuid
  parent            Comment?          @relation("CommentToComment", fields: [parent_id], references: [id])
  parent_id         String?           @db.Uuid
  children          Comment[]         @relation("CommentToComment")
  created_at        DateTime          @default(now()) @db.Timestamptz
  updated_at        DateTime          @updatedAt @db.Timestamptz
  comment_reactions CommentReaction[]
}

model PostReaction {
  user     User         @relation(fields: [user_id], references: [id])
  user_id  String       @db.Uuid
  post     Post         @relation(fields: [post_id], references: [id])
  post_id  String       @db.Uuid
  reaction ReactionType

  @@id([user_id, post_id])
}

model CommentReaction {
  user       User         @relation(fields: [user_id], references: [id])
  user_id    String       @db.Uuid
  comment    Comment      @relation(fields: [comment_id], references: [id])
  comment_id String       @db.Uuid
  reaction   ReactionType

  @@id([user_id, comment_id])
}

// 발레 포스팅

model BalletPost {
  id             String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime                  @default(now()) @db.Timestamptz
  updated_at     DateTime                  @updatedAt @db.Timestamptz
  title          String                    @db.VarChar(200)
  views          Int                       @default(0)
  author         User                      @relation(fields: [author_id], references: [id], onDelete: Cascade)
  author_id      String                    @db.Uuid
  content        String
  category       BalletPostCategory        @relation(fields: [category_id], references: [id])
  category_id    String                    @db.Uuid
  comments       BalletPostComment[]
  tags           BalletPostBalletPostTag[]
  post_reactions BalletPostReaction[]
}

model BalletPostCategory {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String       @unique @db.VarChar(20)
  color      String
  user       User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String       @db.Uuid
  created_at DateTime     @default(now()) @db.Timestamptz
  updated_at DateTime     @updatedAt @db.Timestamptz
  BalletPost BalletPost[]

  @@unique([user_id, name, color])
}

model BalletPostTag {
  id    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String                    @unique @db.VarChar(20)
  posts BalletPostBalletPostTag[]
}

model BalletPostBalletPostTag {
  post    BalletPost    @relation(fields: [post_id], references: [id])
  post_id String        @db.Uuid
  tag     BalletPostTag @relation(fields: [tag_id], references: [id])
  tag_id  String        @db.Uuid

  @@id([post_id, tag_id])
}

model BalletPostComment {
  id                String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content           String
  author            User                        @relation(fields: [author_id], references: [id])
  author_id         String                      @db.Uuid
  post              BalletPost                  @relation(fields: [post_id], references: [id])
  post_id           String                      @db.Uuid
  parent            BalletPostComment?          @relation("CommentToComment", fields: [parent_id], references: [id])
  parent_id         String?                     @db.Uuid
  children          BalletPostComment[]         @relation("CommentToComment")
  created_at        DateTime                    @default(now()) @db.Timestamptz
  updated_at        DateTime                    @updatedAt @db.Timestamptz
  comment_reactions BalletPostCommentReaction[]
}

model BalletPostReaction {
  user     User         @relation(fields: [user_id], references: [id])
  user_id  String       @db.Uuid
  post     BalletPost   @relation(fields: [post_id], references: [id])
  post_id  String       @db.Uuid
  reaction ReactionType

  @@id([user_id, post_id])
}

model BalletPostCommentReaction {
  user       User              @relation(fields: [user_id], references: [id])
  user_id    String            @db.Uuid
  comment    BalletPostComment @relation(fields: [comment_id], references: [id])
  comment_id String            @db.Uuid
  reaction   ReactionType

  @@id([user_id, comment_id])
}

// 발레 기록
model BalletRecord {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @db.Timestamptz
  ballet_done Boolean
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String   @db.Uuid

  @@unique([date, user_id])
}

// 학원 히스토리 추가 예정

// 투표
model Poll {
  id             String        @id @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at     DateTime      @default(now()) @db.Timestamptz
  updated_at     DateTime      @updatedAt @db.Timestamptz
  title          String        @db.VarChar(200)
  author         User          @relation(fields: [author_id], references: [id])
  author_id      String        @db.Uuid
  description    String
  thumbnail_url  String?
  poll_comments  PollComment[]
  end_date       DateTime?     @db.Timestamptz
  allow_multiple Boolean
  options        PollOption[]
  user_vote      UserVote[]

  @@unique([end_date(sort: Desc), created_at(sort: Desc), author_id])
}

model PollComment {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at DateTime @default(now()) @db.Timestamptz
  updated_at DateTime @updatedAt @db.Timestamptz
  author     User     @relation(fields: [author_id], references: [id])
  author_id  String   @db.Uuid
  poll       Poll     @relation(fields: [poll_id], references: [id])
  poll_id    String   @db.Uuid
}

model PollOption {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  created_at DateTime   @default(now()) @db.Timestamptz
  updated_at DateTime   @updatedAt @db.Timestamptz
  poll       Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_id    String     @db.Uuid
  author     User       @relation(fields: [author_id], references: [id])
  author_id  String     @db.Uuid
  user_vote  UserVote[]
}

model UserVote {
  user        User       @relation(fields: [user_id], references: [id])
  user_id     String     @db.Uuid
  poll        Poll       @relation(fields: [poll_id], references: [id], onDelete: Cascade)
  poll_id     String     @db.Uuid
  poll_option PollOption @relation(fields: [option_id], references: [id])
  option_id   String     @db.Uuid

  @@id([user_id, poll_id, option_id])
}
