// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  extensions = [pgcrypto]
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ReactionType {
  LIKE
  DISLIKE
}

// balletStartDate: 발레 시작 날짜, 발레 N년차 확인 용도
model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String @unique @db.VarChar(100)
  nickname String @unique @db.VarChar(100)
  isAdmin Boolean @default(false)
  name String? @db.VarChar(20)
  phone String? @db.VarChar(20)
  birthday String? @db.Char(8)
  password String
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  token String?
  profileImageUrl String?
  gender Gender?
  balletStartDate DateTime? @db.Timestamptz
  balletAcademy String? @db.VarChar(25)
  balletSessionsPerWeek Int?
  posts Post[]
  comments Comment[]
  postReactions PostReaction[]
  commentReactions CommentReaction[]
  balletPosts BalletPost[]
  balletRecord BalletRecord[]
  polls Poll[]
  pollComments PollComment[]
  userVote UserVote[]
  pollOptions PollOption[]
}

// 게시판

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  title String @db.VarChar(200)
  views Int @default(0)
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  content String
  thumbnail String?
  category Category @relation(fields: [categoryId], references: [id])
  categoryId String @db.Uuid
  comments Comment[]
  tags PostTag[]
  postReactions PostReaction[]
}

model Category {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique @db.VarChar(20)
  posts Post[]
}

model Tag {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String @unique @db.VarChar(20)
  posts PostTag[]
}

model PostTag {
  post Post @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  tag Tag @relation(fields: [tagId], references: [id])
  tagId String @db.Uuid

  @@id([postId, tagId])
}

model Comment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  post Post @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  parent Comment? @relation("CommentToComment", fields: [parentId], references: [id])
  parentId String? @db.Uuid
  children Comment[] @relation("CommentToComment")
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  commentReactions CommentReaction[]
}

model PostReaction {
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  post Post @relation(fields: [postId], references: [id])
  postId String @db.Uuid
  reaction ReactionType
  
  @@id([userId, postId])
}

model CommentReaction {
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid
  comment Comment @relation(fields:[commentId], references: [id])
  commentId String @db.Uuid
  reaction ReactionType 

  @@id([userId, commentId])
}

// 발레 포스팅
// 일단 대강 넣고 추후 수정 예정(인스타 포맷 생각 중!)

model BalletPost {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  title String @db.VarChar(200)
  views Int @default(0)
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  content String
  balletRecords BalletPostRecord[]
}

model BalletRecord {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date DateTime @db.Timestamptz
  balletDone Boolean
  balletPosts BalletPostRecord[]
  user User @relation(fields: [userId], references: [id])
  userId String @db.Uuid

  @@unique([date, userId])
}

model BalletPostRecord {
  balletPost BalletPost @relation(fields: [balletPostId], references: [id])
  balletPostId String @db.Uuid
  balletRecord BalletRecord @relation(fields: [balletRecordId], references: [id])
  balletRecordId String @db.Uuid

  @@id([balletPostId, balletRecordId]) 
}

// 학원 히스토리 추가 예정

// 투표
model Poll {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  title String @db.VarChar(200)
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  description String
  thumbnailUrl String?
  pollComments PollComment[]
  participantCount Int @default(0)
  endDate DateTime? @db.Timestamptz
  allowMultiple Boolean
  options PollOption[]
  userVote UserVote[]

  @@unique([endDate(sort: Desc), createdAt(sort: Desc), authorId])
}

model PollComment {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String @db.Uuid
}

model PollOption {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content String
  voteCount Int @default(0)
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz
  poll Poll @relation(fields: [pollId], references: [id])
  pollId String @db.Uuid
  author User @relation(fields: [authorId], references: [id])
  authorId String @db.Uuid
  userVote UserVote[]
}

model UserVote {
 user User @relation(fields: [userId], references: [id])
 userId String @db.Uuid
 poll Poll @relation(fields: [pollId], references: [id])
 pollId String @db.Uuid
 pollOption PollOption @relation(fields: [optionId], references: [id])
 optionId String @db.Uuid

 @@id([userId, pollId, optionId])
}